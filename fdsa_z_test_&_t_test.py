# -*- coding: utf-8 -*-
"""FDSA- Z TEST & T TEST

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FtJXy_0OqCkiCQ7GUP3B9f4_eKqArNjh
"""

# 1) Z-test using formula

# import necessary libraries
import math
import numpy as np
from numpy.random import randn
from statsmodels.stats.weightstats import ztest

#Z-test Formula values
mean_iq = 256
sd_iq = 10/math.sqrt(25)
alpha =0.05
null_mean =105
data = sd_iq*randn(50)+mean_iq

#Print mean and sd

print('mean=%.2f stdv=%.2f' % (np.mean(data), np.std(data)))

#Performing Z-test

ztest_Score, p_value= ztest(data,value = null_mean, alternative='larger')

#Hypothesis

if(p_value < alpha):
  print("Reject Null Hypothesis")
else:
  print("Accept NUll Hypothesis")

import pandas as pd

df=pd.read_csv("/content/cancer.csv")
df.head()

# 2) Ztest using dataset

#import libraries
import pandas as pd
from statsmodels.stats import weightstats as stests

#Read CSV file
df = pd.read_csv("/content/cancer.csv")

#describe the value
df[['radius_mean','texture_mean']].describe()

#By using the Z-test in Stats
ztest ,propability_value = stests.ztest(df['texture_mean'], x2=None, value=146)
print(float(propability_value))

#Hypothesis
if propability_value<0.05:
    print("Null hyphothes is rejected , Alternative hyphothesis accepted")
else:
    print("Null hyphothesis accepted , Alternative hyphothesis rejected")

#3) Two tail Z-test(using python inbuild function)
#Import libraries
from statsmodels.stats.weightstats import ztest as ztest

#entering a simple value
A = [73, 54, 65, 69, 71, 83, 32, 58, 92, 92,
         101, 106, 108, 109, 110, 112, 112, 123, 127, 127]

B = [90, 91, 91, 91, 95, 95, 99, 99, 108, 109,
         109, 114, 115, 116, 117, 117, 128, 129, 130, 133]

#perform two sample z-test
ztest(A, B, value=0)

#4) T-test(one sample)
#Import Python librarie
import numpy as np
from scipy import stats 
from numpy.random import seed
from numpy.random import randn
from numpy.random import normal
from scipy.stats import ttest_1samp

#Create a random sample group
seed=(1)
sample =normal(150,10,20)
print('Sample: ', sample)

#Conduct the test
t_stat, p_value = ttest_1samp(sample, popmean=105)
print("T-statistic value: ", t_stat)  
print("P-Value: ", p_value)

#Result
if p_value <= t_stat:
  print("Reject the null hypothesis")
else:
  print("Accept the null hypothesis")

#5)T-test(two-tailed test)
#Import libraries
from numpy.random import seed
from numpy.random import randn
from numpy.random import normal
from scipy.stats import ttest_ind

# seed the random number generator
seed(1)
# create two independent sample groups
sample1= normal(30, 16, 50)
sample2=normal(33, 18, 50)
print('Sample 1: ',sample1)
print('Sample 2: ',sample2)

#Conduct the test
t_stat, p_value = ttest_ind(sample1, sample2)
print("T-statistic value: ", t_stat)  
print("P-Value: ", p_value)

#Result
if p_value <= t_stat:
  print("Reject the null hypothesis")
else:
  print("Accept the null hypothesis")